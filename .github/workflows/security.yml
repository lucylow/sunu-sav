name: Security Checks
on: 
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * 1'  # Weekly security scan

jobs:
  python-security:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11, 3.12]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit pip-audit safety semgrep
        pip install -r requirements.txt
        
    - name: Bandit security scan
      run: |
        bandit -r server/_core -lll -f json -o bandit-report.json || true
        bandit -r server/_core -lll
        
    - name: pip-audit vulnerability scan
      run: |
        pip-audit --progress=off --format=json --output=pip-audit-report.json || true
        pip-audit --progress=off
        
    - name: Safety check
      run: |
        safety check --json --output=safety-report.json || true
        safety check
        
    - name: Semgrep security scan
      run: |
        semgrep --config=auto --json --output=semgrep-report.json server/_core/ || true
        semgrep --config=auto server/_core/
        
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports-${{ matrix.python-version }}
        path: |
          bandit-report.json
          pip-audit-report.json
          safety-report.json
          semgrep-report.json

  nodejs-security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci --legacy-peer-deps
      
    - name: Run npm audit
      run: |
        npm audit --audit-level=moderate --json > npm-audit-report.json || true
        npm audit --audit-level=moderate
        
    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high --json-file-output=snyk-report.json
        
    - name: Upload Node.js security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: nodejs-security-reports
        path: |
          npm-audit-report.json
          snyk-report.json

  docker-security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Build Docker image
      run: |
        docker build -t sunusav-backend -f Dockerfile.backend .
        docker build -t sunusav-lightning-mock -f Dockerfile.lightning-mock .
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'sunusav-backend'
        format: 'sarif'
        output: 'trivy-backend-results.sarif'
        
    - name: Run Trivy on Lightning mock
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'sunusav-lightning-mock'
        format: 'sarif'
        output: 'trivy-lightning-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-backend-results.sarif'
        
    - name: Upload Trivy Lightning scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-lightning-results.sarif'

  secrets-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Run TruffleHog OSS
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  dependency-review:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Dependency Review
      uses: actions/dependency-review-action@v3
      with:
        fail-on-severity: moderate

  security-testing:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov httpx
        pip install -r requirements.txt
        
    - name: Run security tests
      run: |
        pytest tests/security/ -v --cov=server/_core/security --cov-report=xml
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: security
        name: security-coverage

  macaroon-permissions-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Check macaroon permissions
      run: |
        python scripts/check_macaroon_permissions.py
        
    - name: Validate secrets configuration
      run: |
        python -c "from server._core.security.secrets import validate_secrets; validate_secrets()"

  security-documentation:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check security documentation
      run: |
        # Check if threat model exists and is up to date
        if [ ! -f "docs/threat_model.md" ]; then
          echo "❌ Threat model missing"
          exit 1
        fi
        
        # Check if security implementation guide exists
        if [ ! -f "SECURITY_IMPLEMENTATION.md" ]; then
          echo "❌ Security implementation guide missing"
          exit 1
        fi
        
        # Check if environment template exists
        if [ ! -f "security.env.template" ]; then
          echo "❌ Security environment template missing"
          exit 1
        fi
        
        echo "✅ Security documentation present"

  notify-security-team:
    runs-on: ubuntu-latest
    needs: [python-security, nodejs-security, docker-security, secrets-scan]
    if: failure()
    
    steps:
    - name: Notify security team
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: 'Security scan failed for SunuSàv. Please check the results.'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_SECURITY_WEBHOOK }}
      if: env.SLACK_WEBHOOK_URL != ''

  security-summary:
    runs-on: ubuntu-latest
    needs: [python-security, nodejs-security, docker-security, secrets-scan, security-testing]
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      
    - name: Generate security summary
      run: |
        echo "# Security Scan Summary" > security-summary.md
        echo "" >> security-summary.md
        echo "## Scan Results" >> security-summary.md
        echo "" >> security-summary.md
        
        # Check if reports exist and add summaries
        if [ -f "python-security-reports-3.11/bandit-report.json" ]; then
          echo "### Bandit Security Scan" >> security-summary.md
          echo "✅ Completed" >> security-summary.md
          echo "" >> security-summary.md
        fi
        
        if [ -f "python-security-reports-3.11/pip-audit-report.json" ]; then
          echo "### Dependency Vulnerability Scan" >> security-summary.md
          echo "✅ Completed" >> security-summary.md
          echo "" >> security-summary.md
        fi
        
        if [ -f "nodejs-security-reports/npm-audit-report.json" ]; then
          echo "### NPM Audit" >> security-summary.md
          echo "✅ Completed" >> security-summary.md
          echo "" >> security-summary.md
        fi
        
        echo "## Recommendations" >> security-summary.md
        echo "" >> security-summary.md
        echo "- Review and address any high-severity vulnerabilities" >> security-summary.md
        echo "- Update dependencies regularly" >> security-summary.md
        echo "- Monitor security advisories" >> security-summary.md
        
    - name: Upload security summary
      uses: actions/upload-artifact@v3
      with:
        name: security-summary
        path: security-summary.md
